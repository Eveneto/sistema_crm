# 🐳 DOCKER PARA PRODUÇÃO

version: '3.8'

services:
  # Banco de dados PostgreSQL
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: crm_production
      POSTGRES_USER: crm_user
      POSTGRES_PASSWORD: secure_password_change_this
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    restart: unless-stopped
    networks:
      - crm_network

  # Redis para cache e sessions
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass secure_redis_password
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - crm_network

  # Backend Django
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.production
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://crm_user:secure_password_change_this@db:5432/crm_production
      - REDIS_URL=redis://:secure_redis_password@redis:6379/0
    volumes:
      - ./backend/media:/app/media
      - ./backend/staticfiles:/app/staticfiles
      - ./backend/logs:/app/logs
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - crm_network

  # Frontend React (build para produção)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    volumes:
      - frontend_build:/app/build
    networks:
      - crm_network

  # Nginx como proxy reverso
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx_production.conf:/etc/nginx/conf.d/default.conf
      - frontend_build:/var/www/crm-frontend/build
      - ./backend/staticfiles:/app/staticfiles
      - ./backend/media:/app/media
      - ./ssl:/etc/ssl/certs
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - crm_network

  # Backup automático
  backup:
    image: postgres:15
    environment:
      POSTGRES_DB: crm_production
      POSTGRES_USER: crm_user
      POSTGRES_PASSWORD: secure_password_change_this
    volumes:
      - ./backups:/backups
      - ./backup_script.sh:/backup_script.sh
    command: |
      sh -c '
        while true; do
          sleep 86400  # 24 horas
          pg_dump -h db -U crm_user crm_production > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
          # Manter apenas os últimos 7 backups
          ls -t /backups/backup_*.sql | tail -n +8 | xargs rm -f
        done
      '
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - crm_network

volumes:
  postgres_data:
  redis_data:
  frontend_build:

networks:
  crm_network:
    driver: bridge
