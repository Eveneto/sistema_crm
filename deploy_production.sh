#!/bin/bash

# ===== SCRIPT DE DEPLOY SEGURO PARA PRODU√á√ÉO =====
# Este script automatiza o deploy do CRM com valida√ß√µes de seguran√ßa

set -e  # Parar em qualquer erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ INICIANDO DEPLOY SEGURO DO CRM SYSTEM${NC}"
echo "=================================================="

# ===== VALIDA√á√ïES PR√â-DEPLOY =====
echo -e "\n${YELLOW}üìã 1. VALIDA√á√ïES PR√â-DEPLOY${NC}"

# Verificar se est√° na branch correta
CURRENT_BRANCH=$(git branch --show-current)
if [ "$CURRENT_BRANCH" != "master" ] && [ "$CURRENT_BRANCH" != "main" ]; then
    echo -e "${RED}‚ùå ERRO: Deploy deve ser feito da branch master/main${NC}"
    exit 1
fi

# Verificar se h√° mudan√ßas n√£o commitadas
if ! git diff-index --quiet HEAD --; then
    echo -e "${RED}‚ùå ERRO: H√° mudan√ßas n√£o commitadas${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Branch e commits verificados${NC}"

# ===== VERIFICAR ARQUIVO .env.production =====
echo -e "\n${YELLOW}üìã 2. VERIFICAR CONFIGURA√á√ïES DE PRODU√á√ÉO${NC}"

if [ ! -f "backend/.env.production" ]; then
    echo -e "${RED}‚ùå ERRO: Arquivo .env.production n√£o encontrado${NC}"
    echo "Crie o arquivo com configura√ß√µes seguras para produ√ß√£o"
    exit 1
fi

# Verificar se SECRET_KEY n√£o √© a padr√£o
if grep -q "django-insecure-change-this-key" backend/.env.production; then
    echo -e "${RED}‚ùå ERRO: SECRET_KEY padr√£o detectada em .env.production${NC}"
    echo "Configure uma SECRET_KEY segura"
    exit 1
fi

# Verificar se DEBUG est√° false
if ! grep -q "DEBUG=False" backend/.env.production; then
    echo -e "${RED}‚ùå ERRO: DEBUG deve estar False em produ√ß√£o${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Configura√ß√µes de produ√ß√£o verificadas${NC}"

# ===== TESTES DE SEGURAN√áA =====
echo -e "\n${YELLOW}üìã 3. EXECUTAR TESTES DE SEGURAN√áA${NC}"

# Ir para diret√≥rio do backend
cd backend

# Ativar ambiente virtual se existir
if [ -d ".venv" ]; then
    source .venv/bin/activate
    echo -e "${GREEN}‚úÖ Ambiente virtual ativado${NC}"
fi

# Verificar depend√™ncias de seguran√ßa
echo "üîç Verificando depend√™ncias..."
python -m pip check

# Executar testes Django
echo "üß™ Executando testes Django..."
python manage.py test --settings=crm_backend.settings --verbosity=0

# Verificar migra√ß√µes pendentes
echo "üì¶ Verificando migra√ß√µes..."
python manage.py makemigrations --dry-run --check

echo -e "${GREEN}‚úÖ Testes de seguran√ßa passaram${NC}"

# ===== VALIDA√á√ïES DE C√ìDIGO =====
echo -e "\n${YELLOW}üìã 4. VALIDA√á√ïES DE C√ìDIGO${NC}"

# Verificar imports n√£o utilizados (se flake8 estiver instalado)
if command -v flake8 &> /dev/null; then
    echo "üîç Verificando qualidade do c√≥digo..."
    flake8 --exclude=migrations,venv,.venv --ignore=E501,W503 . || true
fi

# Verificar configura√ß√µes Django
echo "üîç Verificando configura√ß√µes Django..."
python manage.py check --deploy

echo -e "${GREEN}‚úÖ Valida√ß√µes de c√≥digo conclu√≠das${NC}"

# ===== BACKUP PR√â-DEPLOY =====
echo -e "\n${YELLOW}üìã 5. BACKUP PR√â-DEPLOY${NC}"

# Criar backup da base de dados atual (se em produ√ß√£o)
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
BACKUP_DIR="backups/pre_deploy_$TIMESTAMP"

mkdir -p "$BACKUP_DIR"

# Backup do banco SQLite (se existir)
if [ -f "db.sqlite3" ]; then
    cp db.sqlite3 "$BACKUP_DIR/"
    echo -e "${GREEN}‚úÖ Backup do banco SQLite criado${NC}"
fi

# Backup dos arquivos de m√≠dia
if [ -d "media" ]; then
    cp -r media "$BACKUP_DIR/"
    echo -e "${GREEN}‚úÖ Backup dos arquivos de m√≠dia criado${NC}"
fi

echo -e "${GREEN}‚úÖ Backup pr√©-deploy conclu√≠do: $BACKUP_DIR${NC}"

# ===== DEPLOY =====
echo -e "\n${YELLOW}üìã 6. EXECUTAR DEPLOY${NC}"

# Instalar depend√™ncias
echo "üì¶ Instalando depend√™ncias..."
pip install -r requirements.txt

# Executar migra√ß√µes
echo "üì¶ Aplicando migra√ß√µes..."
python manage.py migrate

# Coletar arquivos est√°ticos
echo "üì¶ Coletando arquivos est√°ticos..."
python manage.py collectstatic --noinput

# Criar superusu√°rio se n√£o existir (apenas em primeiro deploy)
echo "üë§ Verificando superusu√°rio..."
python manage.py shell -c "
from django.contrib.auth.models import User
if not User.objects.filter(is_superuser=True).exists():
    print('Criando superusu√°rio...')
    User.objects.create_superuser('admin', 'admin@example.com', 'admin123')
    print('Superusu√°rio criado: admin/admin123')
else:
    print('Superusu√°rio j√° existe')
"

echo -e "${GREEN}‚úÖ Deploy conclu√≠do${NC}"

# ===== VALIDA√á√ïES P√ìS-DEPLOY =====
echo -e "\n${YELLOW}üìã 7. VALIDA√á√ïES P√ìS-DEPLOY${NC}"

# Testar se o servidor sobe sem erros
echo "üîç Testando inicializa√ß√£o do servidor..."
timeout 10s python manage.py runserver 0.0.0.0:8000 --insecure &
SERVER_PID=$!

sleep 5

# Verificar se o processo ainda est√° rodando
if kill -0 $SERVER_PID 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Servidor iniciou com sucesso${NC}"
    kill $SERVER_PID
else
    echo -e "${RED}‚ùå ERRO: Servidor falhou ao iniciar${NC}"
    exit 1
fi

# Testar endpoint de health check
echo "üîç Testando endpoints b√°sicos..."
python -c "
import requests
import sys
try:
    # Teste b√°sico de conectividade
    response = requests.get('http://localhost:8000/admin/', timeout=5)
    print('‚úÖ Endpoint admin acess√≠vel')
except Exception as e:
    print(f'‚ö†Ô∏è Aviso: Endpoint n√£o test√°vel: {e}')
"

echo -e "${GREEN}‚úÖ Valida√ß√µes p√≥s-deploy conclu√≠das${NC}"

# ===== FINALIZA√á√ÉO =====
echo -e "\n${BLUE}üéâ DEPLOY CONCLU√çDO COM SUCESSO!${NC}"
echo "=================================================="
echo -e "${GREEN}‚úÖ Sistema deployado e validado${NC}"
echo -e "${GREEN}‚úÖ Backups criados em: $BACKUP_DIR${NC}"
echo -e "${GREEN}‚úÖ Testes de seguran√ßa passaram${NC}"
echo ""
echo -e "${YELLOW}üìã PR√ìXIMOS PASSOS:${NC}"
echo "1. Verificar logs em production: tail -f logs/*.log"
echo "2. Configurar servidor web (Nginx/Apache)"
echo "3. Configurar SSL/HTTPS"
echo "4. Configurar firewall"
echo "5. Configurar monitoramento"
echo ""
echo -e "${BLUE}üöÄ Sistema pronto para produ√ß√£o!${NC}"

# Voltar para diret√≥rio original
cd ..

exit 0
