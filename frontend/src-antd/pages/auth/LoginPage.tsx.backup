import React, { useState } from 'react';
import { Form, Input, Button, Card, Typography, message, Divider, Checkbox, Alert } from 'antd';
import { UserOutlined, LockOutlined, GoogleOutlined } from '@ant-design/icons';
import { useDispatch } from 'react-redux';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { loginUser } from '../../redux/slices/authSlice';
import { AppDispatch } from '../../redux/store';
import { useAuth } from '../../hooks/useAuth';
import googleLoginService from '../../services/googleLoginService';

const { Title } = Typography;

const LoginPage: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const navigate = useNavigate();
  const location = useLocation();
  const { isAuthenticated, isLoading, error } = useAuth();
  const [rememberMe, setRememberMe] = useState(false);
  const [googleLoading, setGoogleLoading] = useState(false);
  const [form] = Form.useForm();

  // Pega a rota que o usu√°rio tentou acessar antes de ser redirecionado para login
  const from = (location.state as any)?.from?.pathname || '/dashboard';

  // Login via Firebase Auth
  const handleFirebaseLogin = async (values: { username_or_email: string; password: string }) => {
    setFirebaseLoading(true);
    setFirebaseError("");
    
    // Validar se cont√©m @ (valida√ß√£o b√°sica)
    if (!values.username_or_email.includes('@')) {
      setFirebaseError("Para login Firebase, use um email (deve conter @). Username n√£o √© aceito pelo Firebase.");
      setFirebaseLoading(false);
      return;
    }
    
    console.log("Tentando login Firebase com:", values.username_or_email);
    
    try {
      // Firebase Auth s√≥ aceita email, n√£o username
      const userCredential = await signInWithEmailAndPassword(auth, values.username_or_email, values.password);
      const user = userCredential.user;
      const token = await user.getIdToken();
      console.log("Login Firebase sucesso:", user.email);
      console.log("Token Firebase obtido:", token);
      
      // Op√ß√£o 1: Armazenar token do Firebase no localStorage (integra√ß√£o simples)
      localStorage.setItem('firebase_token', token);
      localStorage.setItem('user_email', user.email || '');
      
      // Para login por email/senha, extrair nome do email ou usar nome padr√£o
      const userName = user.displayName || user.email?.split('@')[0] || 'Usu√°rio';
      localStorage.setItem('user_name', userName);
      localStorage.setItem('user_photo', user.photoURL || '');
      
      console.log("Dados salvos:", { 
        email: user.email, 
        name: userName, 
        photo: user.photoURL 
      });
      
      // Op√ß√£o 2: Enviar token para backend Django para valida√ß√£o (implementa√ß√£o futura)
      // await axios.post("/api/auth/firebase-login/", { token });
      
      // Simular o estado de autenticado no Redux
      // Por enquanto, vamos for√ßar o redirecionamento
      message.success("Login Firebase realizado com sucesso!");
      console.log("Redirecionando para:", from);
      navigate(from, { replace: true });
    } catch (err: any) {
      console.error("Erro Firebase:", err);
      let errorMessage = "Erro ao fazer login pelo Firebase";
      
      switch (err.code) {
        case 'auth/user-not-found':
          errorMessage = "Usu√°rio n√£o encontrado. Verifique o email.";
          break;
        case 'auth/wrong-password':
          errorMessage = "Senha incorreta.";
          break;
        case 'auth/invalid-email':
          errorMessage = "Formato de email inv√°lido.";
          break;
        case 'auth/user-disabled':
          errorMessage = "Usu√°rio desabilitado.";
          break;
        case 'auth/too-many-requests':
          errorMessage = "Muitas tentativas. Tente novamente mais tarde.";
          break;
        default:
          errorMessage = err.message || "Erro ao fazer login pelo Firebase";
      }
      
      setFirebaseError(errorMessage);
    } finally {
      setFirebaseLoading(false);
    }
  };

  // Login via Google
  const handleGoogleLogin = async () => {
    setFirebaseLoading(true);
    setFirebaseError("");
    
    const provider = new GoogleAuthProvider();
    
    try {
      console.log("üåê Iniciando login com Google...");
      const result = await signInWithPopup(auth, provider);
      const user = result.user;
      const token = await user.getIdToken();
      
      console.log("‚úÖ Login Google sucesso:", user.email);
      console.log("Token Google obtido:", token);
      
      // Armazenar token e informa√ß√µes do usu√°rio
      localStorage.setItem('firebase_token', token);
      localStorage.setItem('user_email', user.email || '');
      localStorage.setItem('user_name', user.displayName || '');
      localStorage.setItem('user_photo', user.photoURL || '');
      
      message.success("Login com Google realizado com sucesso!");
      navigate(from, { replace: true });
    } catch (err: any) {
      console.error("Erro Google:", err);
      let errorMessage = "Erro ao fazer login com Google";
      
      switch (err.code) {
        case 'auth/popup-closed-by-user':
          errorMessage = "Login cancelado pelo usu√°rio.";
          break;
        case 'auth/popup-blocked':
          errorMessage = "Pop-up bloqueado. Permita pop-ups para este site.";
          break;
        case 'auth/cancelled-popup-request':
          errorMessage = "Solicita√ß√£o de login cancelada.";
          break;
        default:
          errorMessage = err.message || "Erro ao fazer login com Google";
      }
      
      setFirebaseError(errorMessage);
    } finally {
      setFirebaseLoading(false);
    }
  };

  React.useEffect(() => {
    console.log("üîç LoginPage useEffect - isAuthenticated:", isAuthenticated, "location:", location.pathname);
    if (isAuthenticated && location.pathname === '/login') {
      console.log("‚úÖ Redirecionando de /login para:", from);
      navigate(from, { replace: true });
    }
  }, [isAuthenticated, navigate, from, location.pathname]);

  const onFinish = async (values: { username_or_email: string; password: string }) => {
    console.log('üîê Iniciando processo de login...', values);
    try {
      const result = await dispatch(loginUser({ ...values, rememberMe })).unwrap();
      console.log('‚úÖ Login bem-sucedido!', result);
      message.success('Login realizado com sucesso!');
      navigate(from, { replace: true });
    } catch (error: any) {
      console.error('‚ùå Erro no login:', error);
      if (error.response?.status === 401) {
        message.error('Credenciais inv√°lidas. Verifique seu usu√°rio, e-mail ou senha.');
      } else if (error.response?.data?.detail) {
        message.error(error.response.data.detail);
      } else {
        message.error('Falha no login. Tente novamente.');
      }
    }
  }

  return (
    <div style={{ 
      display: 'flex', 
      justifyContent: 'center', 
      alignItems: 'center', 
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #1890ff 0%, #722ed1 100%)'
    }}>
      <Card style={{ width: 400, boxShadow: '0 4px 12px rgba(0,0,0,0.15)' }}>
        <div style={{ textAlign: 'center', marginBottom: 24 }}>
          <Title level={2} style={{ color: '#1890ff', marginBottom: 8 }}>
            üè¢ CRM System
          </Title>
          <Typography.Text type="secondary">
            Entre na sua conta
          </Typography.Text>
        </div>

        <Form
          form={form}
          name="login"
          onFinish={onFinish}
          layout="vertical"
          size="large"
        >
          <Form.Item
            name="username_or_email"
            rules={[{ required: true, message: 'Por favor, insira seu usu√°rio ou e-mail!' }]}
          >
            <Input
              prefix={<UserOutlined />}
              placeholder="Usu√°rio ou E-mail"
            />
          </Form.Item>

          <Form.Item
            name="password"
            rules={[{ required: true, message: 'Por favor, insira sua senha!' }]}
          >
            <Input.Password
              prefix={<LockOutlined />}
              placeholder="Senha"
            />
          </Form.Item>

          <Form.Item>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <Checkbox 
                checked={rememberMe} 
                onChange={(e) => setRememberMe(e.target.checked)}
                disabled={isLoading}
              >
                Lembrar-me
              </Checkbox>
              <Typography.Link style={{ color: '#1890ff', fontSize: '14px' }}>
                Esqueceu a senha?
              </Typography.Link>
            </div>
          </Form.Item>

          {error && (
            <Alert
              message="Erro no login"
              description={error}
              type="error"
              showIcon
              style={{ marginBottom: 16 }}
              closable
            />
          )}

          <Form.Item>
            <Button
              type="primary"
              htmlType="submit"
              loading={isLoading}
              style={{ width: '100%' }}
            >
              Entrar (Django)
            </Button>
          </Form.Item>
          <Form.Item>
            <Button
              type="default"
              style={{ width: '100%' }}
              loading={firebaseLoading}
              onClick={() => {
                console.log("üî• Bot√£o Firebase clicado!");
                const values = form.getFieldsValue();
                console.log("Valores do formul√°rio Antd:", values);
                const email = values.username_or_email || '';
                const password = values.password || '';
                console.log("Valores finais - Email:", email, "Password:", password);
                handleFirebaseLogin({ username_or_email: email, password });
              }}
            >
              Entrar com Firebase
            </Button>
          </Form.Item>
          {firebaseError && (
            <Alert
              message="Erro no login Firebase"
              description={firebaseError}
              type="error"
              showIcon
              style={{ marginBottom: 16 }}
              closable
            />
          )}

          <Divider>ou</Divider>

          <Form.Item>
            <Button
              icon={<GoogleOutlined />}
              onClick={handleGoogleLogin}
              loading={firebaseLoading}
              style={{ width: '100%' }}
              size="large"
            >
              Entrar com Google
            </Button>
          </Form.Item>

          <Form.Item>
            {/* Google OAuth temporariamente desabilitado - necess√°ria configura√ß√£o no Google Cloud Console */}
            {/* <GoogleLoginButton disabled={isLoading} loading={isLoading} /> */}
          </Form.Item>

          <div style={{ textAlign: 'center' }}>
            <Typography.Text type="secondary">
              N√£o tem uma conta? <Link to="/register">Registre-se</Link>
            </Typography.Text>
          </div>
        </Form>
      </Card>
    </div>
  );
};

export default LoginPage;
